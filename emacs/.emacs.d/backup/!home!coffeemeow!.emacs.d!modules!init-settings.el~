;;; -*- lexical-binding: t; -*-
;;========================================================================

(setq default-frame-alist '((undecorated . t)))
(setq inhibit-startup-screen t)
(setq display-line-numbers (quote relative))
(global-display-line-numbers-mode t)

(add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))

(setq-default c-default-style "bsd")
(setq-default c-basic-offset 4)
(setq-default tab-width 4)
(setq-default indent-tabs-mode 1)

(set-face-attribute 'default nil
                    :family "Fira Code"
                    :height 95
                    :weight 'normal
                    :width 'normal)

(use-package fira-code-mode :ensure t)
(global-fira-code-mode)

(set-frame-parameter (selected-frame) 'alpha-background 0.92)


(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(when (window-system) (progn (tool-bar-mode -1) (scroll-bar-mode -1)))
(menu-bar-mode -1)
(tool-bar-mode -1)
(when (fboundp `toggle-scroll-bar) (toggle-scroll-bar -1) )
(setq-default message-log-max nil)
(kill-buffer "*Messages*")


;;=========================================================================
;; backup settings

(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))

(setq auto-save-file-name-transforms
      `((".*" "~/.emacs.d/backup" t)))

;;=========================================================================
;; modeline customization

(use-package doom-modeline
  :ensure t
  :config (doom-modeline-mode))

(use-package nyan-mode
  :ensure t
  :config
  (nyan-mode))

;;=========================================================================
;; theme settings
(use-package doom-themes :ensure t :config
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  (doom-themes-treemacs-config))


;;=========================================================================
;; binding file extensions to mods

(use-package markdown-mode :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package sh-mode
  :mode ("APKBUILD" . sh-mode))

(use-package cmake-mode
 :ensure t
 :mode
 ("CMakeLists.txt" . cmake-mode)
)

(use-package js2-mode
  :ensure t
  :config
  :mode
  (("\\.js\\'" . js2-mode)
   ("\\.mjs\\'" . js2-mode)
   ))

(global-hl-line-mode)

(defmacro with-suppressed-message (&rest body)
  "Suppress new messages temporarily in the echo area and the `*Messages*' buffer while BODY is evaluated."
  (declare (indent 0))
  (let ((message-log-max nil))
    `(with-temp-message (or (current-message) "") ,@body)))

;; (defvar *theme-dark* 'modus-vivendi)
;; (defvar *theme-light* 'modus-operandi)
;; (defcustom *current-theme* nil
;;   "Current emacs theme")

;; ;; disable other themes before loading new one
;; (defadvice load-theme (before theme-dont-propagate activate)
;;   "Disable theme before loading new one."
;;   (mapc #'disable-theme custom-enabled-themes))

;; (defun theme/next-theme (theme)
;;   (if (eq theme 'default)
;;       (disable-theme *current-theme*)
;;     (progn
;; 	  (load-theme theme t)
;; 	  (centaur-tabs-init-tabsets-store)
;; 	  (custom-set-variables `(*current-theme* ',theme))
;; 	  (with-suppressed-message(customize-save-customized)))))

;; (defun theme/toggle-theme ()
;;   (interactive)
;;   (cond ((eq *current-theme* *theme-dark*) (theme/next-theme *theme-light*))
;;         ((eq *current-theme* *theme-light*) (theme/next-theme *theme-dark*))
;; 		((eq *current-theme* nil) (theme/next-theme *theme-dark*))))

;; (load-theme *current-theme* t)
;; (global-set-key [f5] 'theme/toggle-theme)

(use-package rainbow-delimiters
  :ensure t)

(define-global-minor-mode rainbow-delimiters-global-mode rainbow-delimiters-mode
  (lambda ()
    (when (derived-mode-p 'prog-mode)
      (rainbow-delimiters-mode 1))))

(rainbow-delimiters-global-mode)
