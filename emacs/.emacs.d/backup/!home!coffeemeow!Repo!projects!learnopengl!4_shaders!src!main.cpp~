#include <iostream>
#include <glad/gl.h>
#include <GL/glext.h>
#include <GLFW/glfw3.h>
#include "shaders.hpp"

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);

const GLuint WIDTH = 1920, HEIGHT = 1080;


int main()
{
    std::cout << "Starting GLFW context, OpenGL 3.3" << std::endl;
    // Init GLFW
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);

    GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "LearnOpenGL", NULL, NULL);
    glfwMakeContextCurrent(window);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }

    // Set the required callback functions
    glfwSetKeyCallback(window, key_callback);

    GladGLContext context;
    int version = gladLoadGLContext(&context, glfwGetProcAddress);
    if (version == 0)
    {
        std::cout << "Failed to initialize OpenGL context" << std::endl;
        return -1;
    }

	
	float vertices[] = {
		0.5f,  0.5f, 0.0f,  // top right
		0.5f, -0.5f, 0.0f,  // bottom right
		-0.5f, -0.5f, 0.0f,  // bottom left
		-0.5f,  0.5f, 0.0f   // top left 
	};
	unsigned int indices[] = {  // note that we start from 0!
		0, 1, 3,   // first triangle
		1, 2, 3    // second triangle
	};  


	// Vertex Buffer Object
	// Vertex Array Object
	// Element Buffer Object
	
	unsigned int VBO, VAO, EBO;

	context.GenVertexArrays(1, &VAO);
	context.BindVertexArray(VAO);
	
	context.GenBuffers(1, &VBO);
	context.GenBuffers(1, &EBO);
	
	context.BindBuffer(GL_ARRAY_BUFFER, VBO);
	context.BufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	context.BindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	context.BufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

	context.VertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	context.EnableVertexAttribArray(0);
	context.BindBuffer(GL_ARRAY_BUFFER, 0);
	context.BindVertexArray(0);

	unsigned int vertexShader = LoadVertexShader("../src/shaders/triangle.vs", &context);
	unsigned int fragmentShader = LoadFragmentShader("../src/shaders/triangle.fs", &context);
	unsigned int shaderProgram = CreateShaderProgram(&context, &vertexShader, &fragmentShader);

	//Draw
	context.Viewport(0, 0, WIDTH, HEIGHT);

    while (!glfwWindowShouldClose(window))
    {
        glfwPollEvents();

        // Render
        context.ClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        context.Clear(GL_COLOR_BUFFER_BIT);

		context.UseProgram(shaderProgram);
		context.BindVertexArray(VAO);
		context.DrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

        glfwSwapBuffers(window);
    }

    glfwTerminate();
	

    return 0;
}

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)
{
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GL_TRUE);
}
