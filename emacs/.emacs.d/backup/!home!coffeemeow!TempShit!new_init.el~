(use-package rainbow-mode :defer t :ensure t)

(use-package origami :ensure t :config
  (global-origami-mode))

(use-package projectile :ensure t :config
  (projectile-mode +1)
  :bind
  ("s-p" . projectile-command-map))

(setq projectile-track-known-projects-automatically nil)

(use-package magit :ensure t)
(use-package auto-complete :ensure t)
(use-package yasnippet :ensure t)
(use-package yasnippet-snippets :ensure t)
(use-package yaml-mode :ensure t)
(use-package go-mode :ensure t)
(use-package glsl-mode :ensure t)
(use-package haskell-mode :ensure t)
(use-package ansible :ensure t)

;;Doxygen highlighting
(use-package highlight-doxygen :ensure t)
(highlight-doxygen-global-mode 1)

;;============================================================
;; interactive completion & ui (company)
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  )

(use-package company-c-headers
  :ensure t
  )

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

(add-to-list 'company-backend 'company-capf)
;;======================================================================
;; eglot

(use-package eglot
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-hook 'yaml-mode-hook 'ansible)

(add-hook 'go-mode-hook           'eglot-ensure) ;; requires gopls
(add-hook 'c++-mode-hook     'eglot-ensure) ;; requires clang
(add-hook 'js2-mode-hook     'eglot-ensure) ;; requires typescript-language-server from npm
(add-hook 'python-mode-hook       'eglot-ensure) ;; requires python-lsp-server & jedi (PyPy)
(add-hook 'cmake-mode-hook   'eglot-ensure) ;; requires cmake-language-server from pip

(add-to-list 'auto-mode-alist '("\\.vs\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.fs\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.gs\\'" . glsl-mode))

(add-to-list 'eglot-server-programs '((glsl-mode) "glslls" "--port" :autoport))
(add-hook 'glsl-mode-hook 'eglot-ensure)

;;======================================================================
;; flycheck <=> eglot glue

(use-package flycheck
  :ensure t)
(use-package flycheck-clangcheck
  :ensure t)

(defvar-local +lsp--flycheck-eglot--current-errors nil)

(defun +lsp--flycheck-eglot-init (checker callback)
  "CHECKER is the checker (eglot).
CALLBACK is the function that we need to call when we are done, on all the errors."
  (eglot-flymake-backend #'+lsp--flycheck-eglot--on-diagnostics)
  (funcall callback 'finished +lsp--flycheck-eglot--current-errors))

(defun +lsp--flycheck-eglot--on-diagnostics (diags &rest _)
  (cl-labels
      ((flymake-diag->flycheck-err
        (diag)
        (with-current-buffer (flymake--diag-buffer diag)
          (flycheck-error-new-at-pos
           (flymake--diag-beg diag)
           (pcase (flymake--diag-type diag)
             ('eglot-note 'info)
             ('eglot-warning 'warning)
             ('eglot-error 'error)
             (_ (error "Unknown diagnostic type, %S" diag)))
           (flymake--diag-text diag)
           :end-pos (flymake--diag-end diag)
           :checker 'eglot
           :buffer (current-buffer)
           :filename (buffer-file-name)))))
    (setq +lsp--flycheck-eglot--current-errors
          (mapcar #'flymake-diag->flycheck-err diags))
    ;; Call Flycheck to update the diagnostics annotations
    (flycheck-buffer-deferred)))

(defun +lsp--flycheck-eglot-available-p ()
  (bound-and-true-p eglot--managed-mode))

(flycheck-define-generic-checker 'eglot
  "Report `eglot' diagnostics using `flycheck'."
  :start #'+lsp--flycheck-eglot-init
  :predicate #'+lsp--flycheck-eglot-available-p
  :modes '(prog-mode text-mode))

(push 'eglot flycheck-checkers)

(defun +lsp-eglot-prefer-flycheck-h ()
  (when eglot--managed-mode
    (flymake-mode -1)
    (when-let ((current-checker (flycheck-get-checker-for-buffer)))
      (unless (equal current-checker 'eglot)
        (flycheck-add-next-checker 'eglot current-checker)))
    (flycheck-add-mode 'eglot major-mode)
    (flycheck-mode 1)
    ;; Call flycheck on initilization to make sure to display initial
    ;; errors
    (flycheck-buffer-deferred)))

(add-hook 'eglot-managed-mode-hook '+lsp-eglot-prefer-flycheck-h)

(with-eval-after-load
    (when (and
           (not (fboundp 'flymake--diag-buffer))
           (fboundp 'flymake--diag-locus))
      (defalias 'flymake--diag-buffer 'flymake--diag-locus))
  )

(use-package eldoc-box :ensure t)
(add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(modus-operandi))
 '(package-selected-packages
   '(origami ggtags eldoc-box rtags flycheck-google-cpplint flycheck-clangcheck flycheck-projectile flymake-flycheck yasnippet-snippets yaml-mode treemacs-projectile treemacs-magit treemacs-all-the-icons selectrum rainbow-mode rainbow-delimiters quelpa-use-package pug-mode openwith nyan-mode nov markdown-mode js2-mode highlight-doxygen haskell-mode good-scroll go-mode glsl-mode flycheck fira-code-mode eglot doom-themes doom-modeline counsel-projectile company-qml company-c-headers company-box cmake-mode centaur-tabs benchmark-init auto-complete ansible 0x0 0blayout)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :extend nil :stipple nil :background "#ffffff" :foreground "#000000" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight regular :height 101 :width normal :foundry "CTDB" :family "Fira Code")))))
;;; -*- lexical-binding: t; -*-
;;========================================================================

;; Epub support
(use-package nov
  :ensure t)
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

;; ebooks font
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                                           :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)

(setq nov-text-width 80)
(setq nov-text-width t)
(setq visual-fill-column-center-text t)
(add-hook 'nov-mode-hook 'visual-line-mode)
(add-hook 'nov-mode-hook 'visual-fill-column-mode)
(add-hook 'nov-mode-hook (lambda () (display-line-numbers-mode -1)))

;; PDF (external reader - Zathura with mupdf plugin)
(use-package openwith
  :ensure t
  :custom
  (openwith-mode t))

(setq openwith-associations '(("\\.pdf\\'" "zathura" (file))))

;;; -*- lexical-binding: t; -*-
;;========================================================================

(setq initial-scratch-message "
;; M-p s s -- Search in project
;; C-s     -- Search in file
;; M-p p   -- Switch projectile project
;; C-t     -- Toggle Treemacs buffer")

(require 'package)
(setq package-archives '(("gnu"   .  "https://elpa.gnu.org/packages/")
                         ("melpa" .  "https://melpa.org/packages/")))

;; Update package list and install use-package if on fresh system
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

(use-package benchmark-init
  :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))

;; Minimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum)

;; Lower threshold back to 8 MiB (default is 800kB)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (expt 2 24))))

(setq warning-minimum-level :emergency)
;; default emacs configuration directory
(defconst emacs-config-dir "~/.emacs.d/modules/" "")

;; ;; External custom file
(setq custom-file (concat emacs-config-dir "init-custom.el"))

(use-package quelpa
  :ensure t)

(use-package quelpa-use-package
  :ensure t)

(setq use-package-ensure-function 'quelpa)

;; utility function to auto-load my package configurations
(defun load-module (filelist)
  (dolist (file filelist)
    (load (expand-file-name 
           (concat emacs-config-dir file)))
    ))

;;modules-list
(setq modules '(
		"init-custom"
		"init-settings"
		"init-user_functions"
		"init-searchnav"
		"init-code"
		"init-ebook"
		))
(load-module modules)
(setq org-directory (concat (getenv "HOME") "/Documents/org-mode"))
;;============================================================
;;mod-toggle keybindings
(global-set-key (kbd "C-v") 'yank)
(global-set-key (kbd "C-t") 'treemacs)
(global-set-key (kbd "M-n") 'origami-toggle-node)

(cua-mode t)

(use-package selectrum :ensure t :config (selectrum-mode 1))
(use-package swiper    :ensure t
  :bind (
	 ("C-s" . swiper)
	 ))
;;============================================================
;;treemacs
(use-package all-the-icons
  :ensure t
  :config (require 'all-the-icons))
(use-package treemacs-all-the-icons :ensure t)
(use-package treemacs-projectile :after treemacs projectile :ensure t)
(use-package treemacs-magit :after treemacs magit :ensure t)

(use-package treemacs :ensure t :defer t :init :config
  (progn
    (setq treemacs-show-hidden-files t
	  treemacs-width 30
	  treemacs-space-between-root-nodes t
	  treemacs-follow-after-init t
	  treemacs-sorting 'alphabetic-asc
	  treemacs-eldoc-display t
	  treemacs-no-delete-other-windows t
	  treemacs-project-follow-cleanup nil
	  treemacs-display-in-side-window t
	  treemacs-position 'left))
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-git-mode 'simple)
  (treemacs-load-theme "all-the-icons")
  (treemacs))



;;============================================================
;;centaur-tabs keybindings
(use-package centaur-tabs :ensure t :demand
  :bind
  ("<M-left>"  . centaur-tabs-backward)
  ("<M-right>" . centaur-tabs-forward)
  :config
  (centaur-tabs-mode t)
  (progn
    (setq centaur-tabs-set-icons t
	  centaur-tabs-gray-out-icons 'buffer
	  centaur-tabs-set-bar 'over
	  centaur-tabs-set-close-button nil)
	(centaur-tabs-group-by-projectile-project)))

(defun centaur-tabs-hide-tab (x)
  "Do no to show buffer X in tabs."
  (let ((name (format "%s" x)))
    (or
     ;; Current window is not dedicated window.
     (window-dedicated-p (selected-window))

     ;; Buffer name not match below blacklist.
     (string-prefix-p "*company" name)
     (string-prefix-p "*Flycheck" name)
	 (string-prefix-p "*EGLOT" name)
	 (string-prefix-p "*quelpa-build" name)
	 (string-prefix-p "*Warnings" name)
	 (string-prefix-p "*Help" name)
	 (string-prefix-p "*Compile-Log" name)
	 (string-prefix-p "*Ilist" name)

     ;; Is not magit buffer.
     (and (string-prefix-p "magit" name)
	  (not (file-name-extension name)))
     )))


 
;;============================================================
(global-set-key (kbd "TAB") 'self-insert-command)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(pixel-scroll-precision-mode 1)

(use-package counsel
  :ensure t)

(use-package counsel-projectile
  :ensure t)

(counsel-projectile-mode +1)
(use-package imenu-list :ensure t)
;;; -*- lexical-binding: t; -*-
;;========================================================================

(setq default-frame-alist '((undecorated . t)))
(setq inhibit-startup-screen t)
(setq display-line-numbers (quote relative))
(global-display-line-numbers-mode t)

(add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))

(setq-default c-default-style "bsd")
(setq-default c-basic-offset 4)
(setq-default tab-width 4)
(setq-default indent-tabs-mode 1)

(set-face-attribute 'default nil
                    :family "Fira Code"
                    :height 95
                    :weight 'normal
                    :width 'normal)

(use-package fira-code-mode :ensure t)
(global-fira-code-mode)

(set-frame-parameter (selected-frame) 'alpha-background 0.92)


(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(when (window-system) (progn (tool-bar-mode -1) (scroll-bar-mode -1)))
(menu-bar-mode -1)
(tool-bar-mode -1)
(when (fboundp `toggle-scroll-bar) (toggle-scroll-bar -1) )
(setq-default message-log-max nil)
(kill-buffer "*Messages*")


;;=========================================================================
;; backup settings

(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))

(setq auto-save-file-name-transforms
      `((".*" "~/.emacs.d/backup" t)))

;;=========================================================================
;; modeline customization

(use-package doom-modeline
  :ensure t
  :config (doom-modeline-mode))

(use-package nyan-mode
  :ensure t
  :config
  (nyan-mode))

;;=========================================================================
;; theme settings
(use-package doom-themes :ensure t :config
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  (doom-themes-treemacs-config))


;;=========================================================================
;; binding file extensions to mods

(use-package markdown-mode :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package sh-mode
  :mode ("APKBUILD" . sh-mode))

(use-package cmake-mode
 :ensure t
 :mode
 ("CMakeLists.txt" . cmake-mode)
)

(use-package js2-mode
  :ensure t
  :config
  :mode
  (("\\.js\\'" . js2-mode)
   ("\\.mjs\\'" . js2-mode)
   ))

(global-hl-line-mode)

(defmacro with-suppressed-message (&rest body)
  "Suppress new messages temporarily in the echo area and the `*Messages*' buffer while BODY is evaluated."
  (declare (indent 0))
  (let ((message-log-max nil))
    `(with-temp-message (or (current-message) "") ,@body)))

(use-package rainbow-delimiters
  :ensure t)

(define-global-minor-mode rainbow-delimiters-global-mode rainbow-delimiters-mode
  (lambda ()
    (when (derived-mode-p 'prog-mode)
      (rainbow-delimiters-mode 1))))

(rainbow-delimiters-global-mode)
